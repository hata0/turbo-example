/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Tutorial API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  http,
  HttpResponse,
  delay
} from 'msw'
import type {
  PostResponse,
  PostsResponse,
  SuccessResponse
} from '.././model'

export const getGetPostsResponseMock = (overrideResponse: Partial< PostsResponse > = {}): PostsResponse => ({pagination: {currentPage: faker.number.int({min: undefined, max: undefined}), totalCount: faker.number.int({min: undefined, max: undefined}), totalPage: faker.number.int({min: undefined, max: undefined})}, posts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getPostPostsResponseMock = (overrideResponse: Partial< PostResponse > = {}): PostResponse => ({post: {body: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})

export const getDeletePostsResponseMock = (overrideResponse: Partial< SuccessResponse > = {}): SuccessResponse => ({message: faker.string.alpha(20), ...overrideResponse})

export const getGetPostsIdResponseMock = (overrideResponse: Partial< PostResponse > = {}): PostResponse => ({post: {body: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})

export const getPutPostsIdResponseMock = (overrideResponse: Partial< PostResponse > = {}): PostResponse => ({post: {body: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})

export const getDeletePostsIdResponseMock = (overrideResponse: Partial< SuccessResponse > = {}): SuccessResponse => ({message: faker.string.alpha(20), ...overrideResponse})


export const getGetPostsMockHandler200 = (overrideResponse?: PostsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PostsResponse> | PostsResponse)) => {
  return http.get('*/posts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostPostsMockHandler200 = (overrideResponse?: PostResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostResponse> | PostResponse)) => {
  return http.post('*/posts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostPostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeletePostsMockHandler200 = (overrideResponse?: SuccessResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<SuccessResponse> | SuccessResponse)) => {
  return http.delete('*/posts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeletePostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPostsIdMockHandler200 = (overrideResponse?: PostResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PostResponse> | PostResponse)) => {
  return http.get('*/posts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPostsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutPostsIdMockHandler200 = (overrideResponse?: PostResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PostResponse> | PostResponse)) => {
  return http.put('*/posts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutPostsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeletePostsIdMockHandler200 = (overrideResponse?: SuccessResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<SuccessResponse> | SuccessResponse)) => {
  return http.delete('*/posts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeletePostsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getPostsMock = () => [
  getGetPostsMockHandler200(),
  getPostPostsMockHandler200(),
  getDeletePostsMockHandler200(),
  getGetPostsIdMockHandler200(),
  getPutPostsIdMockHandler200(),
  getDeletePostsIdMockHandler200()
]
