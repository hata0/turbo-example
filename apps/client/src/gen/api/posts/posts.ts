/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Tutorial API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  CreatePostBody,
  DeleteManyPostBody,
  ErrorResponse,
  GetPostsParams,
  PostResponse,
  PostsResponse,
  SuccessResponse,
  UpdatePostBody
} from '.././model'
import { fetcher } from '../../../utils/fetcher';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary „Éù„Çπ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
 */
export const getGetPostsUrl = (params: GetPostsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/posts?${normalizedParams.toString()}` : `/posts`
}

export const getPosts = async (params: GetPostsParams, options?: RequestInit): Promise<PostsResponse> => {
  
  return fetcher<Promise<PostsResponse>>(getGetPostsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetPostsQueryKey = (params: GetPostsParams,) => {
    return [`/posts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPostsQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(params: GetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = ErrorResponse


export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(
 params: GetPostsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof fetcher>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(
 params: GetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof fetcher>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(
 params: GetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary „Éù„Çπ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
 */

export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(
 params: GetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPostsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPostsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(params: GetPostsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPostsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsSuspenseQueryError = ErrorResponse


export function useGetPostsSuspense<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(
 params: GetPostsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPostsSuspense<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(
 params: GetPostsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPostsSuspense<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(
 params: GetPostsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary „Éù„Çπ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
 */

export function useGetPostsSuspense<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse>(
 params: GetPostsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPostsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary „Éù„Çπ„Éà„Çí‰ΩúÊàê
 */
export const getPostPostsUrl = () => {


  return `/posts`
}

export const postPosts = async (createPostBody: CreatePostBody, options?: RequestInit): Promise<PostResponse> => {
  
  return fetcher<Promise<PostResponse>>(getPostPostsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createPostBody,)
  }
);}




export const getPostPostsMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError,{data: CreatePostBody}, TContext>, request?: SecondParameter<typeof fetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError,{data: CreatePostBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPosts>>, {data: CreatePostBody}> = (props) => {
          const {data} = props ?? {};

          return  postPosts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPostsMutationResult = NonNullable<Awaited<ReturnType<typeof postPosts>>>
    export type PostPostsMutationBody = CreatePostBody
    export type PostPostsMutationError = ErrorResponse

    /**
 * @summary „Éù„Çπ„Éà„Çí‰ΩúÊàê
 */
export const usePostPosts = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError,{data: CreatePostBody}, TContext>, request?: SecondParameter<typeof fetcher>}
): UseMutationResult<
        Awaited<ReturnType<typeof postPosts>>,
        TError,
        {data: CreatePostBody},
        TContext
      > => {

      const mutationOptions = getPostPostsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary „Éù„Çπ„Éà„ÇíË§áÊï∞ÂâäÈô§
 */
export const getDeletePostsUrl = () => {


  return `/posts`
}

export const deletePosts = async (deleteManyPostBody: DeleteManyPostBody, options?: RequestInit): Promise<SuccessResponse> => {
  
  return fetcher<Promise<SuccessResponse>>(getDeletePostsUrl(),
  {      
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      deleteManyPostBody,)
  }
);}




export const getDeletePostsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePosts>>, TError,{data: DeleteManyPostBody}, TContext>, request?: SecondParameter<typeof fetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePosts>>, TError,{data: DeleteManyPostBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePosts>>, {data: DeleteManyPostBody}> = (props) => {
          const {data} = props ?? {};

          return  deletePosts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePostsMutationResult = NonNullable<Awaited<ReturnType<typeof deletePosts>>>
    export type DeletePostsMutationBody = DeleteManyPostBody
    export type DeletePostsMutationError = unknown

    /**
 * @summary „Éù„Çπ„Éà„ÇíË§áÊï∞ÂâäÈô§
 */
export const useDeletePosts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePosts>>, TError,{data: DeleteManyPostBody}, TContext>, request?: SecondParameter<typeof fetcher>}
): UseMutationResult<
        Awaited<ReturnType<typeof deletePosts>>,
        TError,
        {data: DeleteManyPostBody},
        TContext
      > => {

      const mutationOptions = getDeletePostsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary „Éù„Çπ„Éà„ÇíÂèñÂæó
 */
export const getGetPostsIdUrl = (id: string,) => {


  return `/posts/${id}`
}

export const getPostsId = async (id: string, options?: RequestInit): Promise<PostResponse> => {
  
  return fetcher<Promise<PostResponse>>(getGetPostsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetPostsIdQueryKey = (id: string,) => {
    return [`/posts/${id}`] as const;
    }

    
export const getGetPostsIdQueryOptions = <TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsId>>> = ({ signal }) => getPostsId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPostsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsId>>>
export type GetPostsIdQueryError = ErrorResponse


export function useGetPostsId<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof fetcher>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPostsId<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof fetcher>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPostsId<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary „Éù„Çπ„Éà„ÇíÂèñÂæó
 */

export function useGetPostsId<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPostsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPostsIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsId>>> = ({ signal }) => getPostsId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPostsIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsId>>>
export type GetPostsIdSuspenseQueryError = ErrorResponse


export function useGetPostsIdSuspense<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPostsIdSuspense<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPostsIdSuspense<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary „Éù„Çπ„Éà„ÇíÂèñÂæó
 */

export function useGetPostsIdSuspense<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, request?: SecondParameter<typeof fetcher>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPostsIdSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary „Éù„Çπ„Éà„ÅÆÊõ¥Êñ∞
 */
export const getPutPostsIdUrl = (id: string,) => {


  return `/posts/${id}`
}

export const putPostsId = async (id: string,
    updatePostBody: UpdatePostBody, options?: RequestInit): Promise<PostResponse> => {
  
  return fetcher<Promise<PostResponse>>(getPutPostsIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updatePostBody,)
  }
);}




export const getPutPostsIdMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPostsId>>, TError,{id: string;data: UpdatePostBody}, TContext>, request?: SecondParameter<typeof fetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof putPostsId>>, TError,{id: string;data: UpdatePostBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putPostsId>>, {id: string;data: UpdatePostBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putPostsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutPostsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putPostsId>>>
    export type PutPostsIdMutationBody = UpdatePostBody
    export type PutPostsIdMutationError = ErrorResponse

    /**
 * @summary „Éù„Çπ„Éà„ÅÆÊõ¥Êñ∞
 */
export const usePutPostsId = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPostsId>>, TError,{id: string;data: UpdatePostBody}, TContext>, request?: SecondParameter<typeof fetcher>}
): UseMutationResult<
        Awaited<ReturnType<typeof putPostsId>>,
        TError,
        {id: string;data: UpdatePostBody},
        TContext
      > => {

      const mutationOptions = getPutPostsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary „Éù„Çπ„Éà„ÇíÂâäÈô§
 */
export const getDeletePostsIdUrl = (id: string,) => {


  return `/posts/${id}`
}

export const deletePostsId = async (id: string, options?: RequestInit): Promise<SuccessResponse> => {
  
  return fetcher<Promise<SuccessResponse>>(getDeletePostsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeletePostsIdMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePostsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof fetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePostsId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePostsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deletePostsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePostsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deletePostsId>>>
    
    export type DeletePostsIdMutationError = ErrorResponse

    /**
 * @summary „Éù„Çπ„Éà„ÇíÂâäÈô§
 */
export const useDeletePostsId = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePostsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof fetcher>}
): UseMutationResult<
        Awaited<ReturnType<typeof deletePostsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeletePostsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    